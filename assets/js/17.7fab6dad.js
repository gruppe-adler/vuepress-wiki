(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{479:function(e,t,r){e.exports=r.p+"assets/img/container-structure.32f7cc02.svg"},480:function(e,t,r){e.exports=r.p+"assets/img/list-containers.e16871f2.png"},526:function(e,t,r){"use strict";r.r(t);var n=r(8),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"docker-host"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-host"}},[e._v("#")]),e._v(" ðŸ–¥ Docker Host")]),e._v(" "),n("h2",{attrs:{id:"einleitung"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#einleitung"}},[e._v("#")]),e._v(" Einleitung")]),e._v(" "),n("p",[e._v("Die Gruppe Adler verfÃ¼gt Ã¼ber einen Dedicated Server auf welchem zwei Virtuelle Maschinen laufen. Eine dieser VMs ist der "),n("em",[e._v("Docker Host")]),e._v(", auf welchem Services wie Blechadler, Homepage, CMS, Forum, API, Slotting und einige weitere Tools als jeweils ein/mehrere Docker Container laufen.")]),e._v(" "),n("h2",{attrs:{id:"zugriff-auf-vm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#zugriff-auf-vm"}},[e._v("#")]),e._v(" Zugriff auf VM")]),e._v(" "),n("p",[e._v("Genaueres zum Zugriff gibt es "),n("a",{attrs:{href:"https://github.com/gruppe-adler/ips-n-stuff",target:"_blank",rel:"noopener noreferrer"}},[e._v("hier"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"die-wichtigsten-container"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#die-wichtigsten-container"}},[e._v("#")]),e._v(" Die wichtigsten Container")]),e._v(" "),n("p",[e._v("Alle Applikationen (ein oder mehrere zusammenhÃ¶rigen Container) sind grundsÃ¤tzlich unabhÃ¤ngig von einander aufgebaut. Hierbei gibt es aber einige Ausnahmen:")]),e._v(" "),n("h3",{attrs:{id:"reverse-proxy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reverse-proxy"}},[e._v("#")]),e._v(" Reverse Proxy")]),e._v(" "),n("p",[e._v("Da mehrere Applikationen von auÃŸen auf Port 80 "),n("em",[e._v("(http)")]),e._v(" / 443 "),n("em",[e._v("(https)")]),e._v(" erreichbar sein sollen, muss ein reverse proxy zum Einsatz kommen. HierfÃ¼r kommt "),n("a",{attrs:{href:"https://github.com/jwilder/nginx-proxy",target:"_blank",rel:"noopener noreferrer"}},[e._v("nginx-proxy"),n("OutboundLink")],1),e._v(" und "),n("a",{attrs:{href:"https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion",target:"_blank",rel:"noopener noreferrer"}},[e._v("nginx-proxy-le"),n("OutboundLink")],1),e._v(" (fÃ¼r das automatische LÃ¶sen von Let's Encrypt Zertifikaten) zum Einsatz."),n("br"),e._v("\nAlle Container die nun auch per http(s) erreichbar sein sollen, mÃ¼ssen nur noch zwei Anforderungen erfÃ¼llen:")]),e._v(" "),n("ol",[n("li",[e._v("Dem "),n("code",[e._v("nginx-proxy")]),e._v(" Docker Netzwerk hinzugefÃ¼gt sein.")]),e._v(" "),n("li",[e._v("Folgende Environment Variablen gesetzt haben (Hierbei natÃ¼rlich "),n("code",[e._v("foo")]),e._v(" durch korrekten Wert ersetzen):\n"),n("ul",[n("li",[n("code",[e._v("VIRTUAL_HOST=foo.gruppe-adler.de,www.foo.gruppe-adler.de")])]),e._v(" "),n("li",[n("code",[e._v("LETSENCRYPT_HOST=foo.gruppe-adler.de")])])])])]),e._v(" "),n("p",[n("img",{attrs:{src:r(479),alt:"container-structure"}})]),e._v(" "),n("h3",{attrs:{id:"watchtower"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#watchtower"}},[e._v("#")]),e._v(" Watchtower")]),e._v(" "),n("p",[e._v("Um die Entwicklung zu vereinfachen und ein Continuous Deployment zu gewÃ¤hrleisten, wird "),n("a",{attrs:{href:"https://github.com/containrrr/watchtower",target:"_blank",rel:"noopener noreferrer"}},[e._v("Watchtower"),n("OutboundLink")],1),e._v(" eingesetzt. Dieser Container prÃ¼ft periodisch ob auf Docker Hub eine neuere Versionen eines verwendeten Images zu VerfÃ¼gung steht. Falls eine neue Version gefunden wurde, lÃ¤dt watchtower das neue Image und  updated den betroffenen Container komplett automatisch."),n("br"),e._v("\nBei uns ist es so eingestellt, dass nur Container, bei denen es explizit eingeschaltet wurde, von Watchtower geupdated werden. Dies erfolgt durch das setzen des "),n("code",[e._v("com.centurylinklabs.watchtower.enable=true")]),e._v(" "),n("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/run/#set-metadata-on-container--l---label---label-file",target:"_blank",rel:"noopener noreferrer"}},[e._v("label"),n("OutboundLink")],1),e._v(". Mehr dazu lÃ¤sst sich in der "),n("a",{attrs:{href:"https://containrrr.github.io/watchtower/container-selection/",target:"_blank",rel:"noopener noreferrer"}},[e._v("watchtower Dokumentation"),n("OutboundLink")],1),e._v(" lesen.")]),e._v(" "),n("h2",{attrs:{id:"docker-networks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-networks"}},[e._v("#")]),e._v(" Docker Networks")]),e._v(" "),n("p",[n("em",[e._v("soonTM")])]),e._v(" "),n("h2",{attrs:{id:"docker-compose-files"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-files"}},[e._v("#")]),e._v(" Docker Compose Files")]),e._v(" "),n("p",[e._v("Alle Docker Compose Konfigurationsdateien lassen sich unter "),n("code",[e._v("/etc/docker-configs/")]),e._v(" finden. Der gundlegende Aufbau ist wie folgt:")]),e._v(" "),n("pre",{staticClass:"vue-container"},[n("code",[n("p",[n("code",[e._v("/etc/docker-configs")]),e._v("\nâ”œâ”€â”€ "),n("code",[e._v("homepage")]),e._v(" "),n("em",[e._v("Hier befindet sich alles zur Homepage")]),e._v("\nâ”‚\nâ”œâ”€â”€ "),n("code",[e._v("blechadler")]),e._v(" "),n("em",[e._v("Hier befinden sich alles zum Blechadler")]),e._v("\nâ”‚     â”œâ”€â”€ docker-compose.yml "),n("em",[e._v("Docker Compose Konfiguration fÃ¼r Blechadler")]),e._v("\nâ”‚     â””â”€â”€ volumes "),n("em",[e._v("EnthÃ¤lt soft links zu allen docker volumes fÃ¼r Blechadler")]),e._v("\nâ”‚           â”œâ”€â”€ "),n("em",[e._v("[...]")]),e._v("\nâ”‚           â””â”€â”€ config "),n("em",[e._v("Link zu "),n("strong",[e._v("config")]),e._v(" volume")]),e._v("\nâ”‚\nâ””â”€â”€ "),n("em",[e._v("[...]")])]),e._v("\n")])]),n("h2",{attrs:{id:"cheat-sheet"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cheat-sheet"}},[e._v("#")]),e._v(" Cheat Sheet")]),e._v(" "),n("h3",{attrs:{id:"vm-neuststarten"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vm-neuststarten"}},[e._v("#")]),e._v(" VM neuststarten")]),e._v(" "),n("p",[n("code",[e._v("reboot")])]),e._v(" "),n("h3",{attrs:{id:"alle-container-auflisten"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#alle-container-auflisten"}},[e._v("#")]),e._v(" Alle Container auflisten")]),e._v(" "),n("p",[n("code",[e._v("docker ps -a")]),n("br"),e._v(" "),n("img",{attrs:{src:r(480),alt:"list-containers"}})]),e._v(" "),n("h3",{attrs:{id:"eine-applikation-neu-starten"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eine-applikation-neu-starten"}},[e._v("#")]),e._v(" Eine Applikation (neu-)starten")]),e._v(" "),n("ol",[n("li",[e._v("In jeweilges Verzeichnis wechseln\n"),n("code",[e._v("cd /etc/docker-configs/foo")])]),e._v(" "),n("li",[e._v("Applikation starten\n"),n("code",[e._v("docker-compose up -d")])])]),e._v(" "),n("h3",{attrs:{id:"alle-unbenutzen-images-loschen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#alle-unbenutzen-images-loschen"}},[e._v("#")]),e._v(" Alle unbenutzen Images lÃ¶schen")]),e._v(" "),n("p",[n("code",[e._v("docker rmi $(docker image ls -q)")]),n("br"),e._v("\n(Dieser Befehl versucht zwar alle Images zu lÃ¶schen, kann aber Images, die aktuell in Benutzung sind nicht lÃ¶schen ðŸ˜…)")])])}),[],!1,null,null,null);t.default=a.exports}}]);